#https://solarex.github.io/notes) @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles
# Screenshot: http://i.imgur.com/s0Blh.png


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
  tput sgr0
  if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
    # Changed these colors to fit Solarized theme
    MAGENTA=$(tput setaf 125)
    ORANGE=$(tput setaf 166)
    GREEN=$(tput setaf 64)
    PURPLE=$(tput setaf 61)
    WHITE=$(tput setaf 244)
  else
    MAGENTA=$(tput setaf 5)
    ORANGE=$(tput setaf 4)
    GREEN=$(tput setaf 2)
    PURPLE=$(tput setaf 1)
    WHITE=$(tput setaf 7)
  fi
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
else
  MAGENTA="\033[1;31m"
  ORANGE="\033[1;33m"
  GREEN="\033[1;32m"
  PURPLE="\033[1;35m"
  WHITE="\033[1;37m"
  BOLD=""
  RESET="\033[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BOLD
export RESET

function parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

function watch(){
    while :;
    do
        clear
        date
        $1
        sleep $2
    done
}

export PS1="\[${BOLD}${MAGENTA}\]\u \[$GREEN\]@ \t \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n\$ \[$RESET\]"
export PS2="\[$ORANGE\]→ \[$RESET\]"

#bind key
bind 'set completion-ignore-case on'
#bind 'set completion-prefix-display-length 2'
#bind 'skip-completed-text on'
#bind 'visible-stats on'
# do not show hidden files in the list
bind 'set match-hidden-files off'
bind 'set show-all-if-ambiguous on'

shopt -s cdspell

#git
ssh-add ~/Software/confs/id_rsa_meizu >/dev/null 2>&1
ssh-add ~/Software/confs/id_rsa_github >/dev/null 2>&1
#ssh-add ~/Software/confs/id_rsa_github_solarex >/dev/null 2>&1
ssh-add ~/Software/confs/id_rsa_gitee > /dev/null 2>&1
ssh-add ~/.ssh/id_rsa.icarbonx > /dev/null 2>&1

#path
PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin
PATH=$PATH:/Users/houruhou/Software/bin/local

#android
ADT_HOME=/Users/houruhou/Library/Android/sdk
PATH=$ADT_HOME/tools:$ADT_HOME/platform-tools:$ADT_HOME/build-tools/29.0.2:$PATH

#brew
PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
MANPATH="/usr/local/opt/gnu-sed/libexec/gnuman:$MANPATH"
PATH="/usr/local/Cellar/dos2unix/7.3.1/bin:$PATH"
#PATH="/usr/local/Cellar/findutils/4.4.2/bin:$PATH"
PATH="/usr/local/Cellar/rsync/3.1.2/bin:$PATH"
PATH=/usr/local/opt/curl/bin:$PATH
PATH="/usr/local/opt/sqlite/bin:$PATH"

#go
PATH=$PATH:/usr/local/opt/go/libexec/bin

#PATH="/usr/local/opt/shadowsocks-libev/bin/:$PATH"

#jadx
PATH=$PATH:/Users/houruhou/Software/bin/jadx/build/jadx/bin

export VISUAL=vim
export EDITOR=vim
export HOMEBREW_EDITOR=vim
GRADLE_HOME="/Users/houruhou/.gradle"

#functions
function cdcls(){
    cd "$@";clear
}

function mkcd(){
    mkdir -p "$@";cd "$@";clear
}

function svnlog(){
    svn log --verbose | sed -n "/$1/,/-----$/ p"
}
function greps(){
    #grep -nrHi "$@" .
    grep -i --color=auto -nrHi --exclude-dir={.git,.svn,lib,.gradle,.idea,captures,build,bin,gen} --exclude={*.png,*.jpg,*.jar,*.webp,*.bmp,*.svg} -E "$@" .
}
function text(){
    open -a TextWrangler "$@"
}
function pogai(){
    say -v Sin-ji "$@"
}
function dex-method-count() {
    cat $1 | head -c 92 | tail -c 4 | hexdump -e '1/4 "%d\n"'
}
function dex-method-count-by-package() {
    dir=$(mktemp -d)
    d2j-baksmali $1 -f -o $dir
    cd $dir
    for pkg in `find . -type d`; do
        smali $pkg -o $pkg/classes.dex
        count=$(dex-method-count $pkg/classes.dex)
        name=$(echo ${pkg:(${#dir} + 1)} | tr '/' '.')
        echo -e "$count\t$name"
    done
    cd -
    rm -rf $dir
}
function axml() {
    java -jar /Users/houruhou/Software/confs/axmlprinter-0.1.7.jar "$@"
}

function md() {
    open -a typora "$@"
}
# System.err to grep stacktrace information of catched exceptions
# #AndroidRuntime to grep stacktrace information of uncaughted runtime exceptions
# #MessageQueue to grep exceptions happended during MessageQueue
# #CONSOLE to grep console message releated with javascript console.info
# #dalvikvm informations about dalvik vm 
# #StrictMode information about StrictMode warnings
function debug(){
    adb logcat |grep --color=always -E "System.err|AndroidRuntime|MessageQueue|CONSOLE|W/Bundle|dalvikvm|StrictMode"
}

#genpac
function getpac(){
    genpac --proxy="SOCKS5 127.0.0.1:1080" --gfwlist-proxy="SOCKS5 127.0.0.1:1080" -o /Users/houruhou/Software/confs/shadowsocks_autoproxy.pac --gfwlist-url="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt"
}

function cdls() {
    cd $1
    ls
}

function cfrc() {
    java -jar /Users/houruhou/Software/confs/cfr-0.140.jar $1
}

function cfrj() {
    java -jar /Users/houruhou/Software/confs/cfr-0.140.jar $1 --outputdir $2
}

adblog() {
    suffix=`date +%F-%H-%M-%S`
    adb logcat -v threadtime | tee $suffix.log
}
greplog(){
    suffix=`date +%F-%H-%M-%S`
    adb logcat -v threadtime | grep -i --color=auto "$@" | tee $suffix.$@.log
}
adblogs(){
    suffix=`date +%F-%H-%M-%S`
    adb logcat -v threadtime -s "$@" | tee $suffix."$@".log
}

freev(){
    name=`date +%F-%R`.txt
    curl https://jiang.netlify.com/ -o $name
    cat $name | base64 -d
}












alias clearlog="adb logcat -c && adb logcat -c && adb logcat -c && adb logcat -c"
alias mainlog="adb logcat -v threadtime | tee `date +%F-%H-%M-%S`.main"
alias eventlog="adb logcat -v threadtime -b events | tee `date +%F-%H-%M-%S`.events"
alias startpostgres="postgres -D /usr/local/var/postgres"
alias startmongod="mongod --config /usr/local/etc/mongod.conf"
alias node="node --use-strict"

#alias polipo='polipo -c /Users/houruhou/Software/confs/polipo.conf'
#alias pp='/usr/local/bin/polipo socksParentProxy=localhost:1080'

#alias
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias sl='ls'
alias l='ls'
alias grep='grep --color=auto -i '
alias showandroid="cat ~/Workspace/OpenSource/local_android_installs"
alias showbuild="cat ~/Workspace/OpenSource/build_sample.gradle"
alias showkeyboard="open /Users/houruhou/Pictures/ScreenShots/keyboard.png"
alias showshortcuts="open /Users/houruhou/Pictures/ScreenShots/AS_ShortCuts.png"
alias showgradle="tree -L 3 /Users/houruhou/.gradle/wrapper/dists"
alias shark="java -jar /Users/houruhou/Software/confs/classyshark_3.2.jar"
alias st="open -a SourceTree"
alias flushdns="sudo killall -HUP mDNSResponder"
alias showtvwifi="adb shell dumpsys netstats | grep -E 'iface=wlan.*networkId' | cut -d \\\" -f2"
alias showtvip="adb shell netcfg | grep wlan"
alias applaunch="adb logcat | grep -v InputReader | grep AppLaunch"
alias getip="ifconfig | grep inet | grep broadcast"
alias initconfig="cp /Users/houruhou/Software/confs/config.gradle ."
alias getpicattr="sips -g pixelWidth -g pixelHeight "
alias ss="/usr/local/opt/shadowsocks-libev/bin/ss-local -v -c /Users/houruhou/Software/confs/sslocal.json" 
alias npm="npm --registry=https://registry.npm.taobao.org"
alias methodtime="java -jar /Users/houruhou/Software/confs/methodtime-trace-analysis.jar"
alias cpp='c++ -std=c++11 -stdlib=libc++'
alias monitor='/Users/houruhou/Library/Android/sdk/tools/monitor'
alias jol='java -jar /Users/houruhou/Software/confs/jol-cli-0.9-full.jar'

# -rr - read-only mode (prevents delete and spawn shell)
alias ncdur="ncdu --color dark -rr -x --exclude .git --exclude node_modules"

# git alias
alias gcm="git co main-develop"
alias gcd="git co develop"
alias gmm="git merge main-develop"
alias gpull="git pull"
alias gpush="git push"
alias gss="git stash save"
alias gsp="git stash pop"
alias gsc="git stash clear"



#rvm
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

#virtualenv
# virtualenvwrapper
#export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
#export WORKON_HOME=/Users/houruhou/Workspace/Solarex/PythonWorkspace
#[ -f /usr/local/bin/virtualenvwrapper.sh ] && source /usr/local/bin/virtualenvwrapper.sh
#[ -f /etc/bash_completion.d/virtualenvwrapper ] && source /etc/bash_completion.d/virtualenvwrapper
#export PIP_VIRTUALENV_BASE=$WORKON_HOME
#export PIP_RESPECT_VIRTUALENV=true
#!!!! use pyenv virtualenv instead !!!!

#path
blog="/Users/houruhou/Workspace/OpenSource/Blog+Wiki/blog"
simiki="/Users/houruhou/Workspace/OpenSource/Blog+Wiki/simiki"
wiki="/Users/houruhou/Workspace/OpenSource/Blog+Wiki/wiki"
posts="/Users/houruhou/Workspace/OpenSource/Blog+Wiki/blog/source/_posts"
flyme5="/Users/houruhou/Workspace/Meizu/flyme/app_flyme5_base"
mzupdate="/Users/houruhou/Workspace/Meizu/flyme/app_flyme5_base/meizu/Cloud/MzUpdate"
read="/Users/houruhou/Documents/pdf_to_sync"
proj="/Users/houruhou/Workspace/OpenSource/Projects"
reading="/Users/houruhou/Workspace/OpenSource/AndroidReadings"
study="/Users/houruhou/Workspace/OpenSource/Study"
sample="/Users/houruhou/Library/Android/sdk/samples/android-15"
training="/Users/houruhou/Workspace/OpenSource/Training+Guides"
decompile="/Users/houruhou/Workspace/OpenSource/decompile"

#z
. `brew --prefix`/etc/profile.d/z.sh

#jenv
if which jenv > /dev/null; then eval "$(jenv init -)"; fi

#export JAVA8_HOME=`/usr/libexec/java_home -v1.8`
JAVA_HOME=`/usr/libexec/java_home -v1.8`

#gradle
#GRADLE_HOME="/Users/houruhou/.gradle/wrapper/dists/gradle-6.1.1-bin/4i3ntwqiazourd86epxcz427c/gradle-6.1.1"
#PATH=$PATH:$GRADLE_HOME/bin:

#android
ANDROID_HOME="/Users/houruhou/Library/Android/sdk"
#hierarchyviewer
export ANDROID_HVPROTO=ddm


#groovy
export GROOVY_HOME=/usr/local/opt/groovy/libexec

#node
#. "$(brew --prefix nvm)/nvm.sh"
export NVM_DIR="/Users/houruhou/Workspace/Solarex/NodeWorkspace"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion


#locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8

#PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
#MANPATH="/usr/local/opt/findutils/libexec/gnuman:$MANPATH"


# flutter
export PUB_HOSTED_URL=https://pub.flutter-io.cn
export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn
export PATH="/Users/houruhou/Workspace/Android/FlutterDev/flutter/bin:$PATH"


#git completion
source /Users/houruhou/Software/confs/git-completion.sh

#pyenv
export PYENV_ROOT="/Users/houruhou/.pyenv"
export PATH=$PYENV_ROOT/bin:$PATH
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

export ALL_PROXY=socks5://127.0.0.1:1080



#
# Installation:
#
# Via shell config file  ~/.bashrc  (or ~/.zshrc)
#
#   Append the contents to config file
#   'source' the file in the config file
#
# You may also have a directory on your system that is configured
#    for completion files, such as:
#
#    /usr/local/etc/bash_completion.d/

###-begin-flutter-completion-###

if type complete &>/dev/null; then
  __flutter_completion() {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           flutter completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F __flutter_completion flutter
elif type compdef &>/dev/null; then
  __flutter_completion() {
    si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 flutter completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef __flutter_completion flutter
elif type compctl &>/dev/null; then
  __flutter_completion() {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       flutter completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K __flutter_completion flutter
fi

###-end-flutter-completion-###

## Generated 2019-05-29 08:07:07.002485Z
## By /Users/houruhou/Workspace/Android/FlutterDev/flutter/bin/cache/flutter_tools.snapshot

export BASH_SILENCE_DEPRECATION_WARNING=1
#ruby
PATH="/Users/houruhou/.rvm/gems/ruby-1.9.3-p551/bin:$PATH"


#wumii
PATH="/Users/houruhou/wumii/phabricator/arcanist/bin":$PATH
source /Users/houruhou/wumii/phabricator/arcanist/resources/shell/bash-completion
alias wumii='adb shell dumpsys activity com.wumii.android.athena'
